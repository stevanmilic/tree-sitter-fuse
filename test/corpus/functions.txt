================================================================================
Simple Functions
================================================================================

fun greetings() -> string
    "Hello World"

fun sum(a: i32, b: i32) -> i32
    a + b

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (identifier)
    (type
      (identifier))
    (block
      (expression
        (literal
          (string)))))
  (function_definition
    (identifier)
    (parameter_list
      (param
        (identifier)
        (type
          (identifier)))
      (param
        (identifier)
        (type
          (identifier))))
    (type
      (identifier))
    (block
      (expression
        (infix_expression
          (identifier)
          (operator_identifier)
          (identifier))))))

================================================================================
Generic Functions
================================================================================

fun is_some[A](o: Option[A]) -> bool
    match o:
        Some(a) => true
        None => false

fun map[A, B](l: List[A], f: A -> B) -> List[B]
    let iter = (acc: List[B], l: List[A]) -> List[B] => {
        match l:
            Nil => acc
            Cons(h, t) => iter(Cons[B](f(h), acc), t)
    }
    iter(Nil[B](), l)

fun all_plus_one(l: List[i32]) -> List[i32]
    l.map[i32, i32](a => a + 1)

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (identifier)
    (type_param_clause
      (type_param
        (identifier)))
    (parameter_list
      (param
        (identifier)
        (type
          (generic_type
            (identifier)
            (type_arguments
              (type_list
                (type
                  (identifier))))))))
    (type
      (identifier))
    (block
      (expression
        (match_expression
          (identifier)
          (case
            (pattern
              (identifier)
              (patterns
                (pattern
                  (identifier))))
            (inline_expression
              (literal
                (boolean
                  (true)))))
          (case
            (pattern
              (identifier))
            (inline_expression
              (literal
                (boolean
                  (false)))))))))
  (function_definition
    (identifier)
    (type_param_clause
      (type_param
        (identifier))
      (type_param
        (identifier)))
    (parameter_list
      (param
        (identifier)
        (type
          (generic_type
            (identifier)
            (type_arguments
              (type_list
                (type
                  (identifier)))))))
      (param
        (identifier)
        (type
          (function_type
            (type
              (identifier))
            (type
              (identifier))))))
    (type
      (generic_type
        (identifier)
        (type_arguments
          (type_list
            (type
              (identifier))))))
    (block
      (expression
        (let_expression
          (identifier)
          (inline_expression
            (lambda_expression
              (bindings
                (binding
                  (identifier)
                  (type
                    (generic_type
                      (identifier)
                      (type_arguments
                        (type_list
                          (type
                            (identifier)))))))
                (binding
                  (identifier)
                  (type
                    (generic_type
                      (identifier)
                      (type_arguments
                        (type_list
                          (type
                            (identifier))))))))
              (type
                (generic_type
                  (identifier)
                  (type_arguments
                    (type_list
                      (type
                        (identifier))))))
              (inline_expression
                (inline_block_expression
                  (block
                    (expression
                      (match_expression
                        (identifier)
                        (case
                          (pattern
                            (identifier))
                          (inline_expression
                            (identifier)))
                        (case
                          (pattern
                            (identifier)
                            (patterns
                              (pattern
                                (identifier))
                              (pattern
                                (identifier))))
                          (inline_expression
                            (call_expression
                              (identifier)
                              (arguments
                                (call_expression
                                  (identifier)
                                  (type_arguments
                                    (type_list
                                      (type
                                        (identifier))))
                                  (arguments
                                    (call_expression
                                      (identifier)
                                      (arguments
                                        (identifier)))
                                    (identifier)))
                                (identifier))))))))))))))
      (expression
        (call_expression
          (identifier)
          (arguments
            (call_expression
              (identifier)
              (type_arguments
                (type_list
                  (type
                    (identifier))))
              (arguments))
            (identifier))))))
  (function_definition
    (identifier)
    (parameter_list
      (param
        (identifier)
        (type
          (generic_type
            (identifier)
            (type_arguments
              (type_list
                (type
                  (identifier))))))))
    (type
      (generic_type
        (identifier)
        (type_arguments
          (type_list
            (type
              (identifier))))))
    (block
      (expression
        (call_expression
          (proj_expression
            (identifier)
            (identifier))
          (type_arguments
            (type_list
              (type
                (identifier))
              (type
                (identifier))))
          (arguments
            (lambda_expression
              (identifier)
              (inline_expression
                (infix_expression
                  (identifier)
                  (operator_identifier)
                  (literal
                    (integer)))))))))))

================================================================================
Methods
================================================================================

impl List[A]:
    fun map[B](f: A -> B) -> List[B]
        let iter = (acc, l) => {
            match l:
                Nil => acc
                Cons(h, t) => iter(Cons(f(h), acc), t)
        }
        iter(Nil(), this)

--------------------------------------------------------------------------------

(source_file
  (type_function_definitions
    (identifier)
    (type_param_clause
      (type_param
        (identifier)))
    (function_definition
      (identifier)
      (type_param_clause
        (type_param
          (identifier)))
      (parameter_list
        (param
          (identifier)
          (type
            (function_type
              (type
                (identifier))
              (type
                (identifier))))))
      (type
        (generic_type
          (identifier)
          (type_arguments
            (type_list
              (type
                (identifier))))))
      (block
        (expression
          (let_expression
            (identifier)
            (inline_expression
              (lambda_expression
                (bindings
                  (binding
                    (identifier))
                  (binding
                    (identifier)))
                (inline_expression
                  (inline_block_expression
                    (block
                      (expression
                        (match_expression
                          (identifier)
                          (case
                            (pattern
                              (identifier))
                            (inline_expression
                              (identifier)))
                          (case
                            (pattern
                              (identifier)
                              (patterns
                                (pattern
                                  (identifier))
                                (pattern
                                  (identifier))))
                            (inline_expression
                              (call_expression
                                (identifier)
                                (arguments
                                  (call_expression
                                    (identifier)
                                    (arguments
                                      (call_expression
                                        (identifier)
                                        (arguments
                                          (identifier)))
                                      (identifier)))
                                  (identifier))))))))))))))
        (expression
          (call_expression
            (identifier)
            (arguments
              (call_expression
                (identifier)
                (arguments))
              (this))))))))
