fun sum(a: i32, b: i32) -> i32
    a + b

fun one_plus_two() -> i32
    sum(1, 2)

type Option[T]:
    Some(T)
    None

fun is_some[A](o: Option[A]) -> bool
    match o:
        Some(a) => true
        None => false

impl Option[A]:
    fun is_some() -> bool
        match this:
            Some(a) => true
            None => false

type List[A]:
    Cons(head: A, t: List[A])
    Nil

impl List[A]:
    fun map[B](f: A -> B) -> List[B]
        let iter = (acc: List[B], l: List[A]) -> List[B] => {
            match l:
                Nil => acc
                Cons(h, t) => iter(Cons[B](f(h), acc), t)
        }
        iter(Nil[B](), this)

fun all_plus_one(l: List[i32]) -> List[i32]
    l.map[i32, i32]((a: i32) => a + 1)

type Point:
    x: i32
    y: i32

fun zero_point() -> Point
    Point(0, 0)

type TupleInt(i32, i32)

fun same_values_tuple(v: i32) -> TupleInt
    TupleInt(v, v)

type Tuple[A, B](A, B)

fun gen_same_values_tuple[T](v: T) -> Tuple[T, T]
    Tuple[T, T](v, v)

fun check_it[T](o: Option[T]) -> bool
    o.is_some[T]()

fun main() -> bool
    Some[i32](5).is_some[i32]()

type Context = List[Tuple[str, Point]]

fun empty_context() -> Context
    Nil()

fun add_name_to_context(c: Context, n: str, p: Point) -> Context
    Cons[Tuple[str, Point]](Tuple[str, Point](n, p), c)
